
##########################################  GUARDADO Y RESTAURACION DE ARCHIVOS Y COMMIT #################################################################

git status                                  #   Funciona para ver el estatus
                                            #   de la carpeta, si se han modificado
                                            #   archivos de codigo

git status -s                               #   muestra lo mismo que le comando anterior pero de manera simplificada

git add                                     #   agrega un archivo que ha sido modificado

git add .                                   #   Funciona para evitar estar agregando archivo por archivo, es decir agrega todos los archivos

git commit                                  #   Funciona para guardar la version creada del codigo

git commit -m "Comentario del Commit"       #   Guarda un commit sin entrar al editor de texto

git checkout nombre-archivo                 #   restaura un archivo modificado, esto despues de que en el git status

git restore nombre-archivo                  #   se muestre la modificacion, lo que se logra con esto es devolver el 
                                            #   archivo original al ultimo commit

git diff nombre-archivo                     #   muestra las diferencias o modificaciones que se hicieron en los codigos

git reset                                   #   este comando funciona para borrar la version hasta otro nivel, es decir, podemos regresar de 
                                            #   commit y borrar las siguientes, para este comando se utiliza niveles de borrado

git reset --soft head~No-de-versiones       #   soft funciona solo para regresar y no borrar

git reset --mixed head                      #   borra del area de preparacion y del repositorio pero no del area de trabajo 

git reset --hard head <direccion>           #   borra todo el commit hasta la direccion apuntada

##########################################  PARA OBSERVAR COMMIT ##########################################################################
git log                                     #   Con este mando funciona para observar todos las versiones guardadas
                                            #   desde un comienzo

git log --oneline                           #   Evita ver toda la informacion de las versionas guardadas

git log --oneline --graph                   #   muestra las ramificaciones de manera "grafica"

###########################################  RAMIFICACION #################################################################################

git branch nombre-ramificacion              #   nos funciona para crear un brach o ramificacion 
                                            #   alternativo de nuestro proyecto es decir, se creara
                                            #   una copia de los archivos dentro del proyecto, o de la 
                                            #   carpeta con la que este trabajando

git branch -m nombre-ramificacion           #   Funciona para cambiar el nombre de la ramificacion

git checkout nombre-del-branch              #   para entrar a otro branch o ramificacion se usa este comando

git branch -d nombre-del-branch-a-borrar    #   para eliminar la rama 

git merge Nombre-de-ramificacion            #   crear como ultimo commit el commit reciente de otra ramificacion, es decir, 
                                            #   unir el ultimo commit de una ramificacion en la ramificacion en al que te encuentre

git branch -r                               #   Muestra todas las ramificaciones, incluso las ocultas

git checkout fetch_HEAD                     #   Funciona para cambiar a la rama oculta descargadas por el comando git fetch

git switch -c <RamaCreadaPorUnFetch>        #   Despues de entrar a una rama oculta creada por git fetch, este comando funciona para crear una rama 
                                            #   visible y con la cual puedas trabajar
#######################################################################################################
####                NOTA: si te sale la palabra (END) en el comando pulsa la tecla q
#######################################################################################################


#######################################################################################################
#                                   REMOTO GITHUB
#######################################################################################################

git remote add NOMBRE "url"                     #   Este es para crear un repositorio en linea, segun la plataforma
                                                #   el NOMBRE normalmente como predeterminado ponen como "origin"
pasos para subir el repositorio...          
lo primero que hice fue crear un proyecto, en este caso fue el archivo "main.py"
el archivo .gitignore funciona para que git ignore archivos que no quieras agregar a un commit o guardar en versiones
despues en este proyecto tambien se encuentra este archivo de texto (notas.txt)

por lo que al iniciar al iniciar el git branch (estoy en windows), doy los comandos:
1   git init                        para inicializar git
2   git status                      para observar el estado del proyecto
3   git add .                       para agregar los archivos al repositorio
4   git commit -m NAME              para crear el commit
5   git log --oneline               para observar el commit creado
6   git branch -M main              para crear una ramificacion
7   git log --oneline               para observar de nuevo los commits
8   git remote add origin "url"     para agregar la ruta para subir el repositorio a la nube
9   git push -u origin main         para subir nuestro repositorio

Te abrira una cuenta para que te de permiso de entrar a la URL indicado, es decir si entraras a n repositorio externo que no sea tuyo
vas a tener que esperar a que te den la autorizacion de subir el repositorio

#######################################################################################################################
#                   Actualizar repositorio remoto
#######################################################################################################################

git remote -v                                   #   Funciona para ver los repositorios que tienes 

git clone <url>                                 #   Con este comando vamos a copiar y bajar desde una pagina
                                                #   un proyecto de GITHUB

git pull <origin> <rama>                        #   Con este comando actualizamos el proyecto de la web si se agregaron archivos nuevos hacia nuestro
                                                #   proyecto local es decir (web -> Local)

git push <origin> <rama>                        #   Con este comando actualizamos el proyecto web donde agregamos archivos y modificaciones de nuestro
                                                #   proyecto local es decir (Local -> web)

git fetch                                       #   Funciona para descargar actualizaciones al proyecto local en una rama diferente a la rama principal
                                                #   esta rama se ecnuentra oculta, se necesita usar el comando git branch -r 

git push <origin>: <Rama>                       #   Para subir una rama alterna a la rama principal en github, usamos este comando donde nos crea una rama dentro
                                                #   del repositorio remoto

#######################################################################################################################
#                   Usando el release
#######################################################################################################################



########################################################################################################################
#                               Dudas
########################################################################################################################

*¿Se puede borrar commits anteriores sin eliminar el commit más actual?
*¿Si se desea unir una ramificacion alterna a la ramificacion principal? 
    Por ejemplo, si tu en la rama principal modificaste archivos que no modificaste en otra ramificacion alterna y realizas el commit,
    y en la ramificacion alterna, modificaste otros archivos que no cambiaste en nada en la rama principal, al momento de que yo desee
    unir la ramificacion alterna a la ramificacion principal,¿los archivos que modificaste en el principal, pero no en el alterno, regresan a la version original
    debido a la union?
